prototype(Flowpack.Photon.Neos:Publisher.Site) < prototype(Neos.Fusion:Value) {

    value = Flowpack.Photon.Fusion:LocalResourcePublishing {

        renderer = Flowpack.Photon.Fusion:PublishArray {

            // Load data
            @context {
                site = Flowpack.Photon.Neos:DataProvider.ContentRepository
            }

            // Publish document nodes
            documents = Flowpack.Photon.Fusion:PublishCollection {
                collection = ${q(site).find('[instanceof Neos.Neos:Document]')}

                itemName = 'documentNode'

                // Publish each node as a file
                itemRenderer = Flowpack.Photon.Fusion:FilePublisher {
                    @context.node = ${documentNode}

                    filename = Flowpack.Photon.Neos:Helper.NodeUri

                    // Render by prototype name
                    content = Neos.Fusion:Renderer {
                        type = ${q(documentNode).property('_nodeType.name')}

                        @process.splitHttpMessage = Flowpack.Photon.Neos:HttpMessageSplitter {
                            @process.useBody = ${value.body}
                        }
                    }
                }
            }
        }
    }
}

prototype(Flowpack.Photon.Neos:Helper.NodeUri) < prototype(Neos.Neos:NodeUri) {
    node = ${documentNode}
    format = 'html'
    absolute = false

    @exceptionHandler = 'Neos\\Fusion\\Core\\ExceptionHandlers\\BubblingHandler'

    @process {
        addDefault = ${!value || value == '/' ? '/index.html' : value}
    }
}

prototype(Flowpack.Photon.Neos:DataProvider.ContentRepository) {
    @class = 'Flowpack\\Photon\\Neos\\FusionObjects\\DataProvider\\ContentRepositoryImplementation'

    packageKey = ${packageKey}
}

prototype(Flowpack.Photon.Neos:HttpMessageSplitter) {
    @class = 'Flowpack\\Photon\\Neos\\FusionObjects\\HttpMessageSplitterImplementation'

    message = ${value}
}
